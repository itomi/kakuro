package org.itomi.kakuro.integer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;

import com.google.common.collect.FluentIterable;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.Sets;

// performance purposes
@SuppressWarnings("unchecked")
public enum IntegerPartition {
	THREE(3, 
			set(1,2)),
	FOUR(4, 
			set(1,3)),
	FIVE(5, 
			set(1,4), 
			set(2,3)),
	SIX(6, 
			set(1,5), 
			set(2,4), 
			set(1,2,3)),
	SEVEN(7, 
			set(1,6), 
			set(2,5), 
			set(3,4), 
			set(1,2,4)),
	
	EIGHT(8, 
			set(1,7), 
			set(2,6), 
			set(3,5), 
			set(1,2,5), 
			set(1,3,4)),
	NINE(9, set(1,8), 
			set(2,7), 
			set(3,6), 
			set(4,5), 
			set(1,2,6), 
			set(1,3,5), 
			set(2,3,4)),
	TEN(10, set(1,9), 
			set(2,8), 
			set(3,7), 
			set(4,6), 
			set(1,2,7), 
			set(1,3,6), 
			set(1,4,5), 
			set(2,3,5), 
			set(1,2,3,4)),
	ELEVEN(11, 
			set(2,9), 
			set(3,8), 
			set(4,7), 
			set(5,6), 
			set(1,2,8), 
			set(1,3,7), 
			set(1,4,6), 
			set(2,3,6), 
			set(2,4,5), 
			set(1,2,3,5)),
	TWELVE(12, 
			set(3,9),
			set(4,8), 
			set(5,7), 
			set(1,2,9), 
			set(1,3,8), 
			set(1,4,7), 
			set(1,5,6), 
			set(2,3,7), 
			set(2,4,6), 
			set(3,4,5), 
			set(1,2,3,6), 
			set(1,2,4,5)),
	THIRTEEN(13, 
			set(4,9),
			set(5,8),
			set(6,7),
			set(1,3,9),
			set(1,4,8),
			set(1,5,7),
			set(2,3,8),
			set(2,4,7),
			set(2,5,6),
			set(3,4,6),
			set(1,2,3,7),
			set(1,2,4,6),
			set(1,3,4,5)),
	FOURTEEN(14, 
			set(5,9),
			set(6,8),
			set(1,4,9),
			set(1,5,8),
			set(1,6,7),
			set(2,3,9),
			set(2,4,8),
			set(2,5,7),
			set(3,4,7),
			set(3,5,6),
			set(1,2,3,8),
			set(1,2,4,7),
			set(1,2,5,6),
			set(1,3,4,6),
			set(2,3,4,5)),
	FIFTEEN(15, 
			set(6,9),
			set(7,8),
			set(1,5,9),
			set(1,6,8),
			set(2,4,9),
			set(2,5,8),
			set(2,6,7),
			set(3,4,8),
			set(3,5,7),
			set(4,5,6),
			set(1,2,3,9),
			set(1,2,4,8),
			set(1,2,5,7),
			set(1,3,4,7),
			set(1,3,5,6),
			set(2,3,4,6),
			set(1,2,3,4,5)),
	SIXTEEN(16, 
			set(7,9),
			set(1,6,9),
			set(1,7,8),
			set(2,5,9),
			set(2,6,8),
			set(3,4,9),
			set(3,5,8),
			set(3,6,7),
			set(4,5,7),
			set(1,2,4,9),
			set(1,2,5,8),
			set(1,2,6,7),
			set(1,3,4,8),
			set(1,3,5,7),
			set(1,4,5,6),
			set(2,3,4,7),
			set(2,3,5,6),
			set(1,2,3,4,6)),
	SEVENTEEN(17, 
			set(8,9),
			set(1,7,9),
			set(2,6,9),
			set(2,7,8),
			set(3,5,9),
			set(3,6,8),
			set(4,5,8),
			set(4,6,7),
			set(1,2,5,9),
			set(1,2,6,8),
			set(1,3,4,9),
			set(1,3,5,8),
			set(1,3,6,7),
			set(1,4,5,7),
			set(2,3,4,8),
			set(2,3,5,7),
			set(2,4,5,6),
			set(1,2,3,4,7),
			set(1,2,3,5,6)),
	EIGHTEEN(18, 
			set(1,8,9),
			set(2,7,9),
			set(3,6,9),
			set(3,7,8),
			set(4,5,9),
			set(4,6,8),
			set(5,6,7),
			set(1,2,6,9),
			set(1,2,7,8),
			set(1,3,5,9),
			set(1,3,6,8),
			set(1,4,5,8),
			set(1,4,6,7),
			set(2,3,4,9),
			set(2,3,5,8),
			set(2,3,6,7),
			set(2,4,5,7),
			set(3,4,5,6),
			set(1,2,3,4,8),
			set(1,2,3,5,7),
			set(1,2,4,5,6)),
	NINETEEN(19, 
			set(2,8,9),
			set(3,7,9),
			set(4,6,9),
			set(4,7,8),
			set(5,6,8),
			set(1,2,7,9),
			set(1,3,6,9),
			set(1,3,7,8),
			set(1,4,5,9),
			set(1,4,6,8),
			set(1,5,6,7),
			set(2,3,5,9),
			set(2,3,6,8),
			set(2,4,5,8),
			set(2,4,6,7),
			set(3,4,5,7),
			set(1,2,3,4,9),
			set(1,2,3,5,8),
			set(1,2,3,6,7),
			set(1,2,4,5,7),
			set(1,3,4,5,6)),
	TWENTY(20, 
			set(3,8,9),
			set(4,7,9),
			set(5,6,9),
			set(5,7,8),
			set(1,2,8,9),
			set(1,3,7,9),
			set(1,4,6,9),
			set(1,4,7,8),
			set(1,5,6,8),
			set(2,3,6,9),
			set(2,3,7,8),
			set(2,4,5,9),
			set(2,4,6,8),
			set(2,5,6,7),
			set(3,4,5,8),
			set(3,4,6,7),
			set(1,2,3,5,9),
			set(1,2,3,6,8),
			set(1,2,4,5,8),
			set(1,2,4,6,7),
			set(1,3,4,5,7),
			set(2,3,4,5,6)),
	TWENTY_ONE(21, 
			set(4,8,9),
			set(5,7,9),
			set(6,7,8),
			set(1,3,8,9),
			set(1,4,7,9),
			set(1,5,6,9),
			set(1,5,7,8),
			set(2,3,7,9),
			set(2,4,6,9),
			set(2,4,7,8),
			set(2,5,6,8),
			set(3,4,5,9),
			set(3,4,6,8),
			set(3,5,6,7),
			set(1,2,3,6,9),
			set(1,2,3,7,8),
			set(1,2,4,5,9),
			set(1,2,5,6,7),
			set(1,2,4,6,8),
			set(1,3,4,5,8),
			set(1,3,4,6,7),
			set(2,3,4,5,7),
			set(1,2,3,4,5,6)),
	TWENTY_TWO(22, 
			set(5,8,9),
			set(6,7,9),
			set(1,4,8,9),
			set(1,5,7,9),
			set(1,6,7,8),
			set(2,3,8,9),
			set(2,4,7,9),
			set(2,5,6,9),
			set(2,5,7,8),
			set(3,4,6,9),
			set(3,4,7,8),
			set(3,5,6,8),
			set(4,5,6,7),
			set(1,2,3,7,9),
			set(1,2,4,6,9),
			set(1,2,4,7,8),
			set(1,2,5,6,8),
			set(1,3,4,5,9),
			set(1,3,4,6,8),
			set(1,3,5,6,7),
			set(2,3,4,5,8),
			set(2,3,4,6,7),
			set(1,2,3,4,5,7)),
	TWENTY_THREE(23, 
			set(6,8,9),
			set(1,5,8,9),
			set(1,6,7,9),
			set(2,4,8,9),
			set(2,5,7,9),
			set(2,6,7,8),
			set(3,4,7,9),
			set(3,5,6,9),
			set(3,5,7,8),
			set(4,5,6,8),
			set(1,2,3,8,9),
			set(1,2,4,7,9),
			set(1,2,5,6,9),
			set(1,2,5,7,8),
			set(1,3,4,6,9),
			set(1,3,4,7,8),
			set(1,3,5,6,8),
			set(1,4,5,6,7),
			set(2,3,4,5,9),
			set(2,3,4,6,8),
			set(2,3,5,6,7),
			set(1,2,3,4,5,8),
			set(1,2,3,4,6,7)),
	TWENTY_FOUR(24, 
			set(7,8,9),
			set(1,6,8,9),
			set(2,5,8,9),
			set(2,6,7,9),
			set(3,4,8,9),
			set(3,5,7,9),
			set(3,6,7,8),
			set(4,5,6,9),
			set(4,5,7,8),
			set( 1,2,4,8,9 ), 
			set( 1,2,5,7,9 ), 
			set( 1,2,6,7,8 ), 
			set( 1,3,4,7,9 ), 
			set( 1,3,5,6,9 ), 
			set( 1,3,5,7,8 ),
			set( 1,4,5,6,8 ), 
			set( 2,3,4,6,9 ),
			set( 2,3,4,7,8 ),
			set( 2,3,5,6,8 ),
			set( 2,4,5,6,7 ),
			set( 1,2,3,4,5,9 ), 
			set( 1,2,3,4,6,8 ), 
			set( 1,2,3,5,6,7 )),
	TWENTY_FIVE(25, 
			set( 1,7,8,9 ), 
			set( 2,6,8,9 ), 
			set( 3,5,8,9 ), 
			set( 3,6,7,9 ), 
			set( 4,5,7,9 ), 
			set( 4,6,7,8 ),
			set( 1,2,5,8,9 ),
			set( 1,2,6,7,9 ),
			set( 1,3,4,8,9 ),
			set( 1,3,5,7,9 ), 
			set( 1,3,6,7,8 ), 
			set( 1,4,5,6,9 ), 
			set( 1,4,5,7,8 ), 
			set( 2,3,4,7,9 ), 
			set( 2,3,5,6,9 ), 
			set( 2,3,5,7,8 ), 
			set( 2,4,5,6,8 ),
			set( 3,4,5,6,7 ),
			set( 1,2,3,4,6,9 ), 
			set( 1,2,3,4,7,8 ), 
			set( 1,2,3,5,6,8 ), 
			set( 1,2,4,5,6,7 )),
	TWENTY_SIX(26, 
			set( 2,7,8,9 ),
			set( 3,6,8,9 ), 
			set( 4,5,8,9 ), 
			set( 4,6,7,9 ), 
			set( 5,6,7,8 ), 
			set( 1,2,6,8,9 ), 
			set( 1,3,5,8,9 ), 
			set( 1,3,6,7,9 ), 
			set( 1,4,5,7,9 ), 
			set( 1,4,6,7,8 ), 
			set( 2,3,4,8,9 ), 
			set( 2,3,5,7,9 ), 
			set( 2,3,6,7,8 ), 
			set( 2,4,5,6,9 ), 
			set( 2,4,5,7,8 ), 
			set( 3,4,5,6,8 ), 
			set( 1,2,3,4,7,9 ), 
			set( 1,2,3,5,6,9 ), 
			set( 1,2,3,5,7,8 ), 
			set( 1,2,4,5,6,8 ), 
			set( 1,3,4,5,6,7 )),
	TWENTY_SEVEN(27, 
			set( 3,7,8,9 ), 
			set( 4,6,8,9 ), 
			set( 5,6,7,9 ), 
			set( 1,2,7,8,9 ), 
			set( 1,3,6,8,9 ), 
			set( 1,4,5,8,9 ), 
			set( 1,4,6,7,9 ), 
			set( 1,5,6,7,8 ), 
			set( 2,3,5,8,9 ), 
			set( 2,3,6,7,9 ), 
			set( 2,4,5,7,9 ), 
			set( 2,4,6,7,8 ), 
			set( 3,4,5,6,9 ), 
			set( 3,4,5,7,8 ), 
			set( 1,2,3,4,8,9 ), 
			set( 1,2,3,5,7,9 ), 
			set( 1,2,3,6,7,8 ), 
			set( 1,2,4,5,6,9 ), 
			set( 1,2,4,5,7,8 ), 
			set( 1,3,4,5,6,8 ), 
			set( 2,3,4,5,6,7 )),
	TWENTY_EIGTH(28, 
			set( 4,7,8,9 ), 
			set( 5,6,8,9 ), 
			set( 1,3,7,8,9 ),
			set( 1,4,6,8,9 ), 
			set( 1,5,6,7,9 ), 
			set( 2,3,6,8,9 ), 
			set( 2,4,5,8,9 ), 
			set( 2,4,6,7,9 ), 
			set( 2,5,6,7,8 ), 
			set( 3,4,5,7,9 ), 
			set( 3,4,6,7,8 ), 
			set( 1,2,3,5,8,9 ), 
			set( 1,2,3,6,7,9 ), 
			set( 1,2,4,5,7,9 ), 
			set( 1,2,4,6,7,8 ), 
			set( 1,3,4,5,6,9 ), 
			set( 1,3,4,5,7,8 ), 
			set( 2,3,4,5,6,8 ), 
			set( 1,2,3,4,5,6,7 )),
	TWENTY_NINE(29, 
			set( 5,7,8,9 ), 
			set( 1,4,7,8,9 ), 
			set( 1,5,6,8,9 ), 
			set( 2,3,7,8,9 ), 
			set( 2,4,6,8,9 ),
			set( 2,5,6,7,9 ), 
			set( 3,4,5,8,9 ), 
			set( 3,4,6,7,9 ), 
			set( 3,5,6,7,8 ), 
			set( 1,2,3,6,8,9 ),
			set( 1,2,4,5,8,9 ),
			set( 1,2,4,6,7,9 ),
			set( 1,2,5,6,7,8 ),
			set( 1,3,4,5,7,9 ),
			set( 1,3,4,6,7,8 ),
			set( 2,3,4,5,6,9 ), 
			set( 2,3,4,5,7,8 ), 
			set( 1,2,3,4,5,6,8 )),
	THIRTY(30, 
			set( 6,7,8,9 ),
			set( 1,5,7,8,9 ), 
			set( 2,4,7,8,9 ), 
			set( 2,5,6,8,9 ), 
			set( 3,4,6,8,9 ), 
			set( 3,5,6,7,9 ), 
			set( 4,5,6,7,8 ), 
			set( 1,2,3,7,8,9 ), 
			set( 1,2,4,6,8,9 ), 
			set( 1,2,5,6,7,9 ), 
			set( 1,3,4,5,8,9 ), 
			set( 1,3,4,6,7,9 ), 
			set( 1,3,5,6,7,8 ),
			set( 2,3,4,5,7,9 ), 
			set( 2,3,4,6,7,8 ), 
			set( 1,2,3,4,5,6,9 ),
			set( 1,2,3,4,5,7,8 )),
	THIRTY_ONE(31, 
			set( 1,6,7,8,9 ), 
			set( 2,5,7,8,9 ), 
			set( 3,4,7,8,9 ), 
			set( 3,5,6,8,9 ),
			set( 4,5,6,7,9 ), 
			set( 1,2,4,7,8,9 ),
			set( 1,2,5,6,8,9 ),
			set( 1,3,4,6,8,9 ),
			set( 1,3,5,6,7,9 ),
			set( 1,4,5,6,7,8 ),
			set( 2,3,4,5,8,9 ),
			set( 2,3,4,6,7,9 ), 
			set( 2,3,5,6,7,8 ), 
			set( 1,2,3,4,5,7,9 ), 
			set( 1,2,3,4,6,7,8 )),
	THIRTY_TWO(32, 
			set( 2,6,7,8,9 ), 
			set( 3,5,7,8,9 ), 
			set( 4,5,6,8,9 ), 
			set( 1,2,5,7,8,9 ), 
			set( 1,3,4,7,8,9 ), 
			set( 1,3,5,6,8,9 ), 
			set( 1,4,5,6,7,9 ), 
			set( 2,3,4,6,8,9 ), 
			set( 2,3,5,6,7,9 ), 
			set( 2,4,5,6,7,8 ), 
			set( 1,2,3,4,5,8,9 ), 
			set( 1,2,3,4,6,7,9 ), 
			set( 1,2,3,5,6,7,8 )),
	THIRTY_THREE(33, 
			set( 3,6,7,8,9 ), 
			set( 4,5,7,8,9 ), 
			set( 1,2,6,7,8,9 ),
			set( 1,3,5,7,8,9 ), 
			set( 1,4,5,6,8,9 ), 
			set( 2,3,4,7,8,9 ), 
			set( 2,3,5,6,8,9 ), 
			set( 2,4,5,6,7,9 ), 
			set( 3,4,5,6,7,8 ), 
			set( 1,2,3,4,6,8,9 ), 
			set( 1,2,3,5,6,7,9 ), 
			set( 1,2,4,5,6,7,8 ) ),
	THIRTY_FOUR(34, 
			set( 4,6,7,8,9 ), 
			set( 1,3,6,7,8,9 ), 
			set( 1,4,5,7,8,9 ), 
			set( 2,3,5,7,8,9 ), 
			set( 2,4,5,6,8,9 ), 
			set( 3,4,5,6,7,9 ), 
			set( 1,2,3,4,7,8,9 ), 
			set( 1,2,3,5,6,8,9 ), 
			set( 1,2,4,5,6,7,9 ), 
			set( 1,3,4,5,6,7,8 ) ),
	THIRTY_FIVE(35, 
			set( 5,6,7,8,9 ), 
			set( 1,4,6,7,8,9 ), 
			set( 2,3,6,7,8,9 ), 
			set( 2,4,5,7,8,9 ), 
			set( 3,4,5,6,8,9 ), 
			set( 1,2,3,5,7,8,9 ), 
			set( 1,2,4,5,6,8,9 ), 
			set( 1,3,4,5,6,7,9 ), 
			set( 2,3,4,5,6,7,8 )),
	THIRTY_SIX(36, 
			set( 1,5,6,7,8,9 ), 
			set( 2,4,6,7,8,9 ), 
			set( 3,4,5,7,8,9 ), 
			set( 1,2,3,6,7,8,9 ),
			set( 1,2,4,5,7,8,9 ), 
			set( 1,3,4,5,6,8,9 ), 
			set( 2,3,4,5,6,7,9 ), 
			set( 1,2,3,4,5,6,7,8 )),
	THIRTY_SEVEN(37, 
			set( 2,5,6,7,8,9 ),
			set( 3,4,6,7,8,9 ),
			set( 1,2,4,6,7,8,9 ),
			set( 1,3,4,5,7,8,9 ),
			set( 2,3,4,5,6,8,9 ), 
			set( 1,2,3,4,5,6,7,9 )),
	THIRTY_EIGHT(38,
			set(3,5,6,7,8,9),
			set( 1,2,5,6,7,8,9 ), 
			set( 1,3,4,6,7,8,9 ),
			set( 2,3,4,5,7,8,9 ), 
			set( 1,2,3,4,5,6,8,9 )),
	THIRTY_NINE(39, 
			set( 4,5,6,7,8,9 ), 
			set( 1,3,5,6,7,8,9 ),
			set( 2,3,4,6,7,8,9 ), 
			set( 1,2,3,4,5,7,8,9 )),
	FOURTY(40, 
			set( 1,4,5,6,7,8,9 ), 
			set( 2,3,5,6,7,8,9 ),
			set( 1,2,3,4,6,7,8,9 )),
	FOURTY_ONE(41, 
			set( 2,4,5,6,7,8,9 ), 
			set (1,2,3,5,6,7,8,9 )),
	FOURTY_TWO(42, 
			set( 3,4,5,6,7,8,9 ), 
			set( 1,2,4,5,6,7,8,9 )),
	FROUTY_THREE(43, 
			set( 1,3,4,5,6,7,8,9 )),
	FOURTY_FOUR(44, 
			set( 2,3,4,5,6,7,8,9 )),
	FOURTY_FIVE(45, 
			set( 1,2,3,4,5,6,7,8,9 )); //FINALLY ! 
	
	
	private Integer sum;
	private List<Set<Integer>> partitions;
	
	private static Map<Integer, List<Set<Integer>>> valueToPossibleSums = new HashMap<>();
	private static HashMultimap<Tuple<Integer, Integer>, Set<Integer> > setSizeAndValueToPosiblePartitions = HashMultimap.create();
	
	private IntegerPartition() {
		this.partitions = new ArrayList<>();
	}
	
	private IntegerPartition(Integer sum, Set<Integer>...possiblePartitions) {
		this.sum = sum;
		partitions = Arrays.asList(possiblePartitions);
	}

	private static Set<Integer> set(Integer...values) {
		return new TreeSet<Integer>(Arrays.asList(values));
	}
	
	public static Set<Set<Integer>> getPartitionForSum(int sum, int size) {
		return setSizeAndValueToPosiblePartitions.get(new Tuple<Integer, Integer>(size,sum));
	}
	
	public static Set<Integer> getIntersectionOfSums(int sum1, int size1, int sum2, int size2, Set<Integer> sum1Values, Set<Integer> sum2Values) {
		
		
		Set<Set<Integer>> partitions1 = setSizeAndValueToPosiblePartitions.get(new Tuple<Integer,Integer>(size1,sum1));
		Set<Set<Integer>> partitions2 = setSizeAndValueToPosiblePartitions.get(new Tuple<Integer,Integer>(size2, sum2));
		
		Set<Integer> horizontal = Sets.newHashSet();
		FluentIterable.from(partitions1).forEach(new Consumer<Set<Integer>>() {
			@Override
			public void accept(Set<Integer> t) {
				if(t.containsAll(sum1Values)) {
					HashSet<Integer> newHashSet = Sets.newHashSet(t);
					newHashSet.removeAll(sum1Values);
					horizontal.addAll(t);
				}
			}
		});
		
		Set<Integer> vertical = Sets.newHashSet();
		FluentIterable.from(partitions2).forEach(new Consumer<Set<Integer>>() {
			@Override
			public void accept(Set<Integer> t) {
				if(t.containsAll(sum2Values)) {
					HashSet<Integer> copyOfT = Sets.newHashSet(t);
					copyOfT.removeAll(sum2Values);
					vertical.addAll(t);
				}
			}
		});
		
		HashSet<Integer> possibleValues = Sets.newHashSet(Sets.intersection(horizontal, vertical));
		
		return possibleValues;
	}
	
	public int getValue() {
		return this.sum;
	}
	
	public List<Set<Integer>> getPartitions() {
		return this.partitions;
	}
	
	static {
		for( IntegerPartition partition : IntegerPartition.values()) {
			for(Set<Integer> onePartition : partition.partitions ) {
				setSizeAndValueToPosiblePartitions.put(new Tuple<Integer, Integer>(onePartition.size(), partition.sum), onePartition);
				valueToPossibleSums.put(partition.sum, partition.partitions);
			}
		}
		
	}
	
}